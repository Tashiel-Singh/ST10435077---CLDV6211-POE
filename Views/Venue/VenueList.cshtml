@*
    // Source: Saini (2024), ASP.NET Core MVC Crash Course
// Adapted for event management system
// Original concept: Generic viewmodel with EF Core
*@
@using System.IO
@{
    Layout = "_Layout";
}

@model IEnumerable<ST10435077___CLDV6211_POE.Models.Venue>

@{
    ViewData["Title"] = "Venue List";
}

<h2>Venue List</h2>

<!--
    VenueList.cshtml
    - Search/filter form for venue availability (dropdown: All, Available, Unavailable)
    - Binds to VenueList(bool? available) in VenueController
    - Uses VenueAvailability property in Venue model
-->
<form method="get" asp-action="VenueList" class="mb-3">
    <div class="row g-2 align-items-end">
        <div class="col-md-4">
            <label for="available" class="form-label">Availability</label>
            <select name="available" id="available" class="form-select" asp-items="@(new SelectList(new[] {
                new { Value = "", Text = "All" },
                new { Value = "true", Text = "Available" },
                new { Value = "false", Text = "Unavailable" },
            }, "Value", "Text", ViewBag.Available?.ToString()))">
            </select>
        </div>
        <div class="col-md-2">
            <button type="submit" class="btn btn-primary w-100">Filter</button>
        </div>
    </div>
</form>

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger">@TempData["Error"]</div>
}

<table class="table table-striped">
    <thead>
        <tr>
            <th>Name</th>
            <th>Location</th>
            <th>Capacity</th>
            <th>Image</th>
            <th>Available</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
    @try 
    {
        foreach (var venue in Model ?? Enumerable.Empty<ST10435077___CLDV6211_POE.Models.Venue>())
        {
            <tr>
                <td>@venue.VenueName</td>
                <td>@venue.Location</td>
                <td>@venue.Capacity</td>
                <td>
                    @if (!string.IsNullOrEmpty(venue.ImageUrl))
                    {
                        <img src="@Url.Action("DownloadImage", "Venue", new { fileName = venue.ImageUrl })"
                             width="120"
                             alt="Venue Image"
                             onerror="this.onerror=null; this.src='/images/placeholder.png'; this.alt='Image not available';" />
                    }
                    else
                    {
                        <img src="/images/placeholder.png" width="120" alt="No image available" />
                    }
                </td>
                <td>@(venue.VenueAvailability ? "Yes" : "No")</td>
                <td>
                    <div style="display:inline-block">
                        <a asp-action="VenueEdit" asp-route-VenueID="@venue.VenueId" class="btn btn-sm btn-warning">Edit</a>
                    </div>
                    <div style="display:inline-block">
                        <form asp-action="Delete" method="post" class="d-inline">
                            <input type="hidden" name="VenueID" value="@venue.VenueId" />
                            <button type="submit" class="btn btn-sm btn-danger">Delete</button>
                        </form>
                    </div>
                </td>
            </tr>
        }
    }
    catch (Exception ex)
    {
        <tr><td colspan="6"><div class="alert alert-danger">Error loading venues: @ex.Message</div></td></tr>
    }
    </tbody>
</table>
<a asp-action="VenueAdd" class="btn btn-primary">Add New Venue</a>